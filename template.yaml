AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Api:
    Cors:
      AllowMethods: "'GET, POST, PUT,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  ResourceTable:
    Type: String
    Description: Reference to table containing resource data
  CognitoAuthorizerArn:
    Type: String
    Description: Reference to Cognito UserPool for the stage
  CustomDomain:
    Type: String
    Description: Custom API to connect this lambda to
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain

Resources:
  InsertResourceApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        openapi: 3.0.0
        info:
          title: NVA Reource API
          version: '1.0'
        paths:
          /:
            post:
              summary: Insert Resource in Database.
              security:
                - CognitoUserPool: []
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Resource'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InsertResource.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
                passthroughBehavior: WHEN_NO_MATCH
              responses:
                '200':
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Resource'
          /{identifier}
            get:
              summary: Fetch Resource in Database.
              security:
                - CognitoUserPool: []
              parameters:
                - in: path
                  name: identifier
                  schema:
                    type: string
                    format: uuid
                  required: true
                  description: UUID identifier of the Resource to fetch.
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Resource'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchResource.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
                passthroughBehavior: WHEN_NO_MATCH
              responses:
                '200':
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Resource'
            put:
              summary: Modify Resource in Database.
              security:
                - CognitoUserPool: []
              parameters:
                - in: path
                  name: identifier
                  schema:
                    type: string
                    format: uuid
                  required: true
                  description: UUID identifier of the Resource to modify.
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Resource'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ModifyResource.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
                passthroughBehavior: WHEN_NO_MATCH
              responses:
                '200':
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Resource'
        components:
          securitySchemes:
            CognitoUserPool:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                type: cognito_user_pools
                providerARNs:
                  - !Ref CognitoAuthorizerArn
          schemas:
            Resource:
              title: NVA Resource
              type: object
              properties:
                identifier:
                  type: string
                  format: uuid
                createdDate:
                  type: string
                  format: date-time
                modifiedDate:
                  type: string
                  format: date-time
                publishedDate:
                  type: string
                  format: date-time
                indexedDate:
                  type: string
                  format: date-time
                owner:
                  type: string
                entityDescription:
                  type: object
                status:
                  type: string
                link:
                  type: uri
                handle:
                  type: uri
                publisher:
                  type: object
                license:
                  type: object
                fileSet:
                  type: object
              required:
                - identifier
                - createdDate
                - modifiedDate
                - owner
                - entityDescription
                - status
  InsertResource:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./resource_api/insert_resource
      Handler: app.handler
      Runtime: python3.7
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId: !Ref ResourceApi
      Environment:
        Variables:
          TABLE_NAME: !Ref ResourceTable
          REGION: !Ref AWS::Region
          ALLOWED_ORIGIN: '*'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ResourceTable
  FetchResource:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./resource_api/fetch_resource
      Handler: app.handler
      Runtime: python3.7
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /{identifier}
            Method: GET
            RestApiId: !Ref ResourceApi
      Environment:
        Variables:
          TABLE_NAME: !Ref ResourceTable
          REGION: !Ref AWS::Region
          ALLOWED_ORIGIN: '*'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ResourceTable
  ModifyResource:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./modify_resource
      Handler: app.handler
      Runtime: python3.7
      Events:
        PutEvent:
          Type: Api
          Properties:
            Path: /{id}
            Method: PUT
            RestApiId: !Ref ResourceApi
      Environment:
        Variables:
          TABLE_NAME: !Ref ResourceTable
          REGION: !Ref AWS::Region
          ALLOWED_ORIGIN: '*'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ResourceTable
  InsertResourceBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref CustomDomainBasePath
      DomainName: !Ref CustomDomain
      RestApiId: !Ref InsertResourceApi
      Stage: !Ref InsertResourceApi.Stage
